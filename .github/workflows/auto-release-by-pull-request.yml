name: Auto Release by Pull Request

on:
  push:
    branches:
      - test

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ssh-key: ${{ secrets.DEPLOY_KEY }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install local dependencies (if package.json exists)
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f "package.json" ]; then
          echo "📦 Installing project dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          elif [ -f "pnpm-lock.yaml" ]; then
            npm install -g pnpm
            pnpm install --frozen-lockfile
          else
            npm install
          fi
        else
          echo "⚠️ No package.json found"
          exit 1
        fi

    - name: Download calendar version wrapper script
      shell: bash
      run: |
        echo "📥 Downloading calendar version wrapper script..."
        curl -fsSL -o /tmp/calendar-version-wrapper.js https://raw.githubusercontent.com/akfmdl/github-actions-workflows/main/scripts/calendar-version-wrapper.js
        chmod +x /tmp/calendar-version-wrapper.js

    - name: Run custom versioning
      id: custom-versioning
      shell: bash
      working-directory: .
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        VERSION_PY_PATH: src/version.py
      run: |        
        echo "🚀 Running custom versioning..."
        node /tmp/calendar-version-wrapper.js

    - name: Commit and push version changes
      shell: bash
      working-directory: .
      env:
        VERSION_PY_PATH: src/version.py
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 변경사항 확인
        CHANGED_FILES=$(git diff --name-only)
        FILES_TO_COMMIT=""
        
        # 관심있는 파일들만 필터링
        for file in package.json $VERSION_PY_PATH; do
          if [ -f "$file" ] && echo "$CHANGED_FILES" | grep -q "^$file$"; then
            FILES_TO_COMMIT="$FILES_TO_COMMIT $file"
          fi
        done
        
        if [ -n "$FILES_TO_COMMIT" ]; then
          echo "📝 변경된 파일들을 커밋합니다:$FILES_TO_COMMIT"
          
          # 변경된 파일들을 스테이징
          git add $FILES_TO_COMMIT
          
          # NEW_VERSION 환경변수가 설정되어 있으면 사용, 아니면 기본 메시지
          if [ -n "$NEW_VERSION" ]; then
            COMMIT_MESSAGE="chore(release): $NEW_VERSION [skip ci]"
          else
            COMMIT_MESSAGE="chore: update version files [skip ci]"
          fi
          
          git commit -m "$COMMIT_MESSAGE"
          echo "✅ Git 커밋 완료: $COMMIT_MESSAGE"
          
          git push origin HEAD
          echo "✅ Git 푸시 완료"
        else
          echo "⚪ 커밋할 변경사항이 없습니다."
        fi

    - name: Create new version tag and release
      shell: bash
      working-directory: .
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$NEW_VERSION" ]; then
          echo "Creating new version tag: $NEW_VERSION"
          
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"
          echo "New version tag created: $NEW_VERSION"
          
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          echo "Creating GitHub release with new version..."
          
          # Release notes 파일이 있으면 사용, 없으면 기본 메시지 사용
          if [ -f "RELEASE_NOTES.md" ]; then
            echo "Using generated release notes from RELEASE_NOTES.md"
            gh release create "$NEW_VERSION" --title "$NEW_VERSION" --notes-file "RELEASE_NOTES.md" --latest
          else
            echo "Using default release notes"
            RELEASE_NOTES="New Version Release $NEW_VERSION"
            gh release create "$NEW_VERSION" --title "$NEW_VERSION" --notes "$RELEASE_NOTES" --latest
          fi
          echo "GitHub release created: $NEW_VERSION"
        fi