# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# Extra secrets that will be managed by the chart
# (You can use them with extraEnv or extraEnvFrom or some of the extraVolumes values).
# The format for secret data is "key/value" where
#    * key (templated) is the name of the secret that will be created
#    * value: an object with the standard 'data' or 'stringData' key (or both).
#          The value associated with those keys must be a string (templated)
extraSecrets: {}
# eg:
# extraSecrets:
#   '{{ .Release.Name }}-airflow-connections':
#     type: 'Opaque'
#     labels:
#       my.custom.label/v1: my_custom_label_value_1
#     data: |
#       AIRFLOW_CONN_GCP: 'base64_encoded_gcp_conn_string'
#       AIRFLOW_CONN_AWS: 'base64_encoded_aws_conn_string'
#     stringData: |
#       AIRFLOW_CONN_OTHER: 'other_conn'
#   '{{ .Release.Name }}-other-secret-name-suffix':
#     data: |
#        ...
#   'proxy-config':
#     stringData: |
#        HTTP_PROXY: http://proxy_user:proxy_password@192.168.0.10:2080
#        HTTPS_PROXY: http://proxy_user:proxy_password@192.168.0.10:2080
#        NO_PROXY: "localhost,127.0.0.1,.svc.cluster.local,kubernetes.default.svc"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# https://artifacthub.io/packages/helm/bitnami/mlflow
mlflow:
  fullnameOverride: mlflow
  postgresql:
    enabled: false
  externalDatabase:
    dialectDriver: "postgresql"
    host: postgresql
    port: 5432
    database: mlflow
    user: postgres
    password: postgres
  tracking:
    service:
      type: NodePort
    auth:
      enabled: false
    persistence:
      size: 1Gi
  minio:
    auth:
      rootUser: myminioadmin
      rootPassword: myminioadminpassword
    service:
      type: NodePort

# https://artifacthub.io/packages/helm/prometheus-community/prometheus
prometheus:
  server:
    fullnameOverride: prometheus-server
    service:
      type: NodePort
    persistentVolume:
      enabled: true
      size: 1Gi
  alertmanager:
    enabled: false
  kube-state-metrics:
    fullnameOverride: kube-state-metrics
  prometheus-node-exporter:
    fullnameOverride: node-exporter
  prometheus-pushgateway:
    fullnameOverride: pushgateway

# https://artifacthub.io/packages/helm/grafana/grafana
grafana:
  fullnameOverride: grafana
  persistence:
    enabled: true
    size: 1Gi
  service:
    type: NodePort
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:80
          access: proxy
          isDefault: true
  adminPassword: admin

# https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  fullnameOverride: postgresql
  auth:
    postgresPassword: postgres
    username: postgres
    password: postgres
    database: airflow
  primary:
    initdb:
      scripts:
        01-create-databases.sql: |
          -- MLflow 데이터베이스 생성
          CREATE DATABASE mlflow;
          GRANT ALL PRIVILEGES ON DATABASE mlflow TO postgres;
          -- Harbor 데이터베이스 생성
          CREATE DATABASE harbor;
          GRANT ALL PRIVILEGES ON DATABASE harbor TO postgres;
    persistence:
      enabled: true
      size: 1Gi

nvidia:
  enabled: true
  image:
    repository: nvcr.io/nvidia/k8s-device-plugin
    tag: "v0.17.1"
    pullPolicy: IfNotPresent
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule

# https://artifacthub.io/packages/helm/argoproj/argo-cd
argo-cd:
  fullnameOverride: argo-cd
  server:
    service:
      type: NodePort
  configs:
    secret:
      argocdServerAdminPassword: $2a$10$fYFgQiokT3Qm3uvzKgUHGu0gKOnHfFZ5J47UyV6wT46ag8H4YK.kS # admin

# https://artifacthub.io/packages/helm/bitnami/harbor
harbor:
  fullnameOverride: harbor
  postgresql:
    enabled: false
  trivy:
    enabled: false
  externalDatabase:
    host: postgresql
    port: 5432
    user: postgres
    password: postgres
    coreDatabase: harbor
  service:
    type: NodePort
  nginx:
    tls:
      enabled: false
  adminPassword: admin
  externalURL: http://harbor.mlops-platform.svc.cluster.local

# https://github.com/actions/actions-runner-controller/charts/gha-runner-scale-set-controller
gha-runner-scale-set-controller:
  fullnameOverride: gha-runner-scale-set-controller
  serviceAccount:
    name: gha-runner-scale-set-controller
  flags:
    watchSingleNamespace: ""

# https://github.com/actions/actions-runner-controller/charts/gha-runner-scale-set
gha-runner-scale-set:
  fullnameOverride: gha-runner-scale-set
  runnerScaleSetName: self-hosted
  githubConfigUrl: https://github.com/akfmdl/mlops-lifecycle
  githubConfigSecret: github-credential
  controllerServiceAccount:
    name: gha-runner-scale-set-controller
    # Replace this with the namespace of the controller service account
    namespace: mlops-platform
  containerMode:
    type: ""
  template:
    spec:
      initContainers:
        - name: init-dind-externals
          image: ghcr.io/actions/actions-runner:2.323.0
          imagePullPolicy: Always
          command:
            [
              "cp",
              "-r",
              "-v",
              "/home/runner/externals/.",
              "/home/runner/tmpDir/",
            ]
          volumeMounts:
            - mountPath: /home/runner/tmpDir
              name: dind-externals
      containers:
        - name: runner
          image: ghcr.io/actions/actions-runner:2.323.0
          command: ["/home/runner/run.sh"]
          env:
            - name: DOCKER_HOST
              value: unix:///var/run/docker.sock
          volumeMounts:
            - name: work
              mountPath: /home/runner/_work
            - name: dind-sock
              mountPath: /var/run
          resources:
            limits:
              cpu: 4000m
              memory: 4Gi
            requests:
              cpu: 100m
              memory: 128Mi
        - name: dind
          image: docker:24.0.5-dind
          env:
            - name: DOCKER_GROUP_GID
              value: "123"
          securityContext:
            privileged: true
          volumeMounts:
            - name: work
              mountPath: /home/runner/_work
            - name: dind-sock
              mountPath: /var/run
            - name: dind-externals
              mountPath: /home/runner/externals
          args:
            - dockerd
            - "--host=unix:///var/run/docker.sock"
            - "--group=$(DOCKER_GROUP_GID)"
            - "--insecure-registry=harbor.mlops-platform.svc.cluster.local"
            - "--mtu=1450"
          resources:
            limits:
              cpu: 8000m
              memory: 8Gi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: work
          emptyDir: {}
        - name: dind-sock
          emptyDir: {}
        - name: dind-externals
          emptyDir: {}
