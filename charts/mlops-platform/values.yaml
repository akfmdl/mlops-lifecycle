# https://artifacthub.io/packages/helm/bitnami/mlflow
mlflow:
  fullnameOverride: mlflow
  postgresql:
    enabled: false
  externalDatabase:
    dialectDriver: "postgresql"
    host: postgresql
    port: 5432
    database: mlflow
    user: postgres
    password: postgres
  tracking:
    service:
      type: NodePort
    auth:
      enabled: false
    persistence:
      size: 1Gi
  minio:
    auth:
      rootUser: myminioadmin
      rootPassword: myminioadminpassword
    service:
      type: NodePort

# https://artifacthub.io/packages/helm/prometheus-community/prometheus
prometheus:
  server:
    fullnameOverride: prometheus-server
    service:
      type: NodePort
    persistentVolume:
      enabled: true
      size: 1Gi
  alertmanager:
    enabled: false
  kube-state-metrics:
    fullnameOverride: kube-state-metrics
  prometheus-node-exporter:
    fullnameOverride: node-exporter
  prometheus-pushgateway:
    fullnameOverride: pushgateway

# https://artifacthub.io/packages/helm/grafana/grafana
grafana:
  fullnameOverride: grafana
  persistence:
    enabled: true
    size: 1Gi
  service:
    type: NodePort
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:80
          access: proxy
          isDefault: true
  adminPassword: admin

# https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  fullnameOverride: postgresql
  auth:
    postgresPassword: postgres
    username: postgres
    password: postgres
    database: airflow
  primary:
    initdb:
      scripts:
        01-create-databases.sql: |
          -- MLflow 데이터베이스 생성
          CREATE DATABASE mlflow;
          GRANT ALL PRIVILEGES ON DATABASE mlflow TO postgres;
          -- Harbor 데이터베이스 생성
          CREATE DATABASE harbor;
          GRANT ALL PRIVILEGES ON DATABASE harbor TO postgres;
    persistence:
      enabled: true
      size: 1Gi

nvidia:
  enabled: true
  image:
    repository: nvcr.io/nvidia/k8s-device-plugin
    tag: "v0.17.1"
    pullPolicy: IfNotPresent
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule

# https://artifacthub.io/packages/helm/argoproj/argo-cd
argo-cd:
  fullnameOverride: argo-cd
  server:
    service:
      type: NodePort
  configs:
    secret:
      argocdServerAdminPassword: $2a$10$fYFgQiokT3Qm3uvzKgUHGu0gKOnHfFZ5J47UyV6wT46ag8H4YK.kS # admin

# https://artifacthub.io/packages/helm/bitnami/harbor
harbor:
  fullnameOverride: harbor
  postgresql:
    enabled: false
  trivy:
    enabled: false
  externalDatabase:
    host: postgresql
    port: 5432
    user: postgres
    password: postgres
    coreDatabase: harbor
  service:
    type: NodePort
  nginx:
    tls:
      enabled: false
  adminPassword: admin
  externalURL: http://harbor.mlops-platform.svc.cluster.local

# https://github.com/actions/actions-runner-controller/charts/gha-runner-scale-set-controller
gha-runner-scale-set-controller:
  fullnameOverride: gha-runner-scale-set-controller
  serviceAccount:
    name: gha-runner-scale-set-controller
  flags:
    watchSingleNamespace: ""

# https://github.com/actions/actions-runner-controller/charts/gha-runner-scale-set
gha-runner-scale-set:
  fullnameOverride: gha-runner-scale-set
  runnerScaleSetName: self-hosted
  githubConfigUrl: https://github.com/akfmdl/mlops-lifecycle
  githubConfigSecret: github-credential
  controllerServiceAccount:
    name: gha-runner-scale-set-controller
    # Replace this with the namespace of the controller service account
    namespace: mlops-platform
  containerMode:
    type: ""
  template:
    spec:
      initContainers:
        - name: init-dind-externals
          image: ghcr.io/actions/actions-runner:2.323.0
          imagePullPolicy: Always
          command:
            [
              "cp",
              "-r",
              "-v",
              "/home/runner/externals/.",
              "/home/runner/tmpDir/",
            ]
          volumeMounts:
            - mountPath: /home/runner/tmpDir
              name: dind-externals
      containers:
        - name: runner
          image: ghcr.io/actions/actions-runner:2.323.0
          command: ["/home/runner/run.sh"]
          env:
            - name: DOCKER_HOST
              value: unix:///var/run/docker.sock
          volumeMounts:
            - name: work
              mountPath: /home/runner/_work
            - name: dind-sock
              mountPath: /var/run
          resources:
            limits:
              cpu: 4000m
              memory: 4Gi
            requests:
              cpu: 100m
              memory: 128Mi
        - name: dind
          image: docker:24.0.5-dind
          env:
            - name: DOCKER_GROUP_GID
              value: "123"
          securityContext:
            privileged: true
          volumeMounts:
            - name: work
              mountPath: /home/runner/_work
            - name: dind-sock
              mountPath: /var/run
            - name: dind-externals
              mountPath: /home/runner/externals
          args:
            - dockerd
            - "--host=unix:///var/run/docker.sock"
            - "--group=$(DOCKER_GROUP_GID)"
            - "--insecure-registry=harbor.mlops-platform.svc.cluster.local"
            - "--mtu=1450"
          resources:
            limits:
              cpu: 8000m
              memory: 8Gi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: work
          emptyDir: {}
        - name: dind-sock
          emptyDir: {}
        - name: dind-externals
          emptyDir: {}
