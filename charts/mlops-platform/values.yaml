# https://artifacthub.io/packages/helm/bitnami/mlflow
mlflow:
  fullnameOverride: mlflow
  postgresql:
    enabled: false
  externalDatabase:
    dialectDriver: "postgresql"
    host: postgresql
    port: 5432
    database: mlflow
    user: postgres
    password: postgres
  tracking:
    service:
      type: NodePort
      nodePorts:
        http: "30402"
    auth:
      enabled: false
    persistence:
      size: 1Gi
  minio:
    auth:
      rootUser: myminioadmin
      rootPassword: myminioadminpassword
    service:
      type: NodePort
    persistence:
      enabled: true
      size: 5Gi

# https://grafana.github.io/helm-charts
loki-stack:
  prometheus:
    enabled: true
    server:
      fullnameOverride: prometheus-server
      service:
        type: NodePort
        nodePort: 30403
      persistentVolume:
        enabled: true
        size: 1Gi
    alertmanager:
      enabled: false
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    prometheus-pushgateway:
      fullnameOverride: pushgateway
    extraScrapeConfigs: |
      - job_name: api-server
        scrape_interval: 5s
        static_configs:
          - targets:
            - api-server.mlops-platform.svc.cluster.local:80
  grafana:
    enabled: true
    fullnameOverride: grafana
    persistence:
      enabled: true
      size: 1Gi
    service:
      type: NodePort
      nodePort: 30404
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - uid: prometheus
            orgId: 1
            name: Prometheus
            type: prometheus
            typeName: Prometheus
            access: proxy
            url: http://prometheus-server:80
            password: ""
            user: ""
            database: ""
            basicAuth: false
            isDefault: true
            jsonData:
              # Prometheus 지표 안에 포함된 exemplar.TraceID를 어느 트레이싱 시스템에 연결할지 지정
              exemplarTraceIdDestinations:
                - datasourceUid: tempo
                  name: TraceID
              httpMethod: POST
            readOnly: false
            editable: true
          - uid: tempo
            orgId: 1
            name: Tempo
            type: tempo
            typeName: Tempo
            access: proxy
            url: http://tempo:3100
            password: ""
            user: ""
            database: ""
            basicAuth: false
            isDefault: false
            jsonData:
              nodeGraph:
                enabled: true
              search:
                hide: false
              lokiSearch:
                datasourceUid: loki
              # Traces → Logs 연결
              tracesToLogs:
                datasourceUid: loki # 로그를 어디서 조회할지 (Loki)
                filterByTraceID: true # trace_id로 로그 필터링
                filterBySpanID: false # span_id로는 필터 안 함
                mapTagNamesEnabled: false # 태그 이름 매핑 사용 안 함
                tags:
                  - compose_service # 로그 검색 시 사용될 태그
            readOnly: false
            editable: true
          - uid: loki
            orgId: 1
            name: Loki
            type: loki
            typeName: Loki
            access: proxy
            url: http://loki:3100
            password: ""
            user: ""
            database: ""
            basicAuth: false
            isDefault: false
            jsonData:
              derivedFields:
                # Logs → Traces 연동을 위한 Grafana용 "로그 파싱 + 링크 생성 규칙"
                # 로그 메시지 중에서 trace_id=abc123과 같은 패턴을 찾고
                # 해당 trace ID를 Tempo에 전달해서
                # 해당 로그와 연결된 trace를 클릭 한 번으로 바로 조회할 수 있게 만들어 줍
                - datasourceUid: tempo # Trace를 조회할 대상 (Tempo)
                  matcherRegex: (?:trace_id)=(\w+) # 로그에서 trace_id 추출할 정규표현식
                  name: TraceID # 필드 이름
                  url: $${__value.raw} # Tempo에서 이 값을 trace_id로 사용
            readOnly: false
            editable: true
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        folder: /var/lib/grafana/dashboards/default
      datasources:
        enabled: false
    adminPassword: admin
  promtail:
    enabled: true
    fullnameOverride: promtail
    configmap:
      enabled: true
    config:
      clients:
        - url: http://loki:3100/loki/api/v1/push
          batchwait: 2s
          batchsize: 1048576
      snippets:
        pipelineStages:
          - cri: {}
          - multiline:
              firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
              max_wait_time: 3s
          - regex:
              expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},\d{3}) .*trace_id=(?P<trace_id>[a-fA-F0-9]+) .*resource\.service\.name=(?P<compose_service>[^\]]+)] .* (?P<message>(?s:.*))$$'
          - labels:
              trace_id:
              compose_service:
  loki:
    enabled: true
    fullnameOverride: loki
    image:
      tag: 2.9.3
    service:
      type: NodePort
    config:
      limits_config:
        ingestion_rate_mb: 10
        ingestion_burst_size_mb: 20
    extraArgs:
      config.expand-env: true
    server:
      grpc_server_max_recv_msg_size: 8388608
      grpc_server_max_send_msg_size: 8388608

# https://grafana.github.io/helm-charts
tempo:
  enabled: true
  fullnameOverride: tempo
  service:
    type: NodePort

# https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  fullnameOverride: postgresql
  auth:
    postgresPassword: postgres
    username: postgres
    password: postgres
    database: airflow
  primary:
    initdb:
      scripts:
        01-create-databases.sql: |
          -- MLflow 데이터베이스 생성
          CREATE DATABASE mlflow;
          GRANT ALL PRIVILEGES ON DATABASE mlflow TO postgres;
          -- Harbor 데이터베이스 생성
          CREATE DATABASE harbor;
          GRANT ALL PRIVILEGES ON DATABASE harbor TO postgres;
    persistence:
      enabled: true
      size: 1Gi

nvidia:
  enabled: true
  image:
    repository: nvcr.io/nvidia/k8s-device-plugin
    tag: "v0.17.1"
    pullPolicy: IfNotPresent
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule

# https://artifacthub.io/packages/helm/argoproj/argo-cd
argo-cd:
  fullnameOverride: argo-cd
  server:
    service:
      type: NodePort
      nodePort: 30080
  configs:
    secret:
      argocdServerAdminPassword: $2a$10$fYFgQiokT3Qm3uvzKgUHGu0gKOnHfFZ5J47UyV6wT46ag8H4YK.kS # admin

# https://artifacthub.io/packages/helm/bitnami/harbor
harbor:
  fullnameOverride: harbor
  postgresql:
    enabled: false
  trivy:
    enabled: false
  externalDatabase:
    host: postgresql
    port: 5432
    user: postgres
    password: postgres
    coreDatabase: harbor
  service:
    type: NodePort
    nodePort: 31459
  nginx:
    tls:
      enabled: false
  redis:
    enabled: true
    master:
      persistence:
        enabled: true
        size: 1Gi
  adminPassword: admin
  externalURL: http://harbor.mlops-platform.svc.cluster.local

# https://github.com/actions/actions-runner-controller/charts/gha-runner-scale-set-controller
gha-runner-scale-set-controller:
  fullnameOverride: gha-runner-scale-set-controller
  serviceAccount:
    name: gha-runner-scale-set-controller
  flags:
    watchSingleNamespace: ""

# https://github.com/actions/actions-runner-controller/charts/gha-runner-scale-set
gha-runner-scale-set:
  fullnameOverride: gha-runner-scale-set
  runnerScaleSetName: self-hosted
  githubConfigUrl: https://github.com/akfmdl/mlops-lifecycle
  githubConfigSecret: github-credential
  controllerServiceAccount:
    name: gha-runner-scale-set-controller
    # Replace this with the namespace of the controller service account
    namespace: mlops-platform
  containerMode:
    type: ""
  template:
    spec:
      initContainers:
        - name: init-dind-externals
          image: ghcr.io/actions/actions-runner:2.323.0
          imagePullPolicy: Always
          command:
            [
              "cp",
              "-r",
              "-v",
              "/home/runner/externals/.",
              "/home/runner/tmpDir/",
            ]
          volumeMounts:
            - mountPath: /home/runner/tmpDir
              name: dind-externals
      containers:
        - name: runner
          image: ghcr.io/actions/actions-runner:2.323.0
          command: ["/home/runner/run.sh"]
          env:
            - name: DOCKER_HOST
              value: unix:///var/run/docker.sock
          volumeMounts:
            - name: work
              mountPath: /home/runner/_work
            - name: dind-sock
              mountPath: /var/run
          resources:
            limits:
              cpu: 4000m
              memory: 4Gi
            requests:
              cpu: 100m
              memory: 128Mi
        - name: dind
          image: docker:24.0.5-dind
          env:
            - name: DOCKER_GROUP_GID
              value: "123"
          securityContext:
            privileged: true
          volumeMounts:
            - name: work
              mountPath: /home/runner/_work
            - name: dind-sock
              mountPath: /var/run
            - name: dind-externals
              mountPath: /home/runner/externals
          args:
            - dockerd
            - "--host=unix:///var/run/docker.sock"
            - "--group=$(DOCKER_GROUP_GID)"
            - "--insecure-registry=harbor.mlops-platform.svc.cluster.local"
            - "--mtu=1450"
          resources:
            limits:
              cpu: 8000m
              memory: 8Gi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: work
          emptyDir: {}
        - name: dind-sock
          emptyDir: {}
        - name: dind-externals
          emptyDir: {}
